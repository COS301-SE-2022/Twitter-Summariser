{
  "version": 3,
  "sources": ["../../../../../node_modules/@middy/core/index.js", "../../../../../node_modules/@middy/util/index.js", "../../../../../node_modules/@middy/http-json-body-parser/index.js", "../../../../../src/functions/resultSet/handler.ts", "../../../../../src/libs/lambda.ts", "../../../../../src/functions/resources/APIresponse.ts", "../../../../../src/model/database.ts", "../../../../../src/services/creator.service.ts", "../../../../../src/services/report.service.ts", "../../../../../src/services/reportBlock.service.ts", "../../../../../src/services/resultSet.service.ts", "../../../../../src/services/textStyles.service.ts", "../../../../../src/services/permission.service.ts", "../../../../../src/services/tweet.service.ts", "../../../../../src/services/schedule.service.ts", "../../../../../src/services/index.ts"],
  "sourcesContent": ["\"use strict\";\n\nconst middy = (baseHandler = () => {}, plugin) => {\n  var _plugin$beforePrefetc;\n\n  plugin === null || plugin === void 0 ? void 0 : (_plugin$beforePrefetc = plugin.beforePrefetch) === null || _plugin$beforePrefetc === void 0 ? void 0 : _plugin$beforePrefetc.call(plugin);\n  const beforeMiddlewares = [];\n  const afterMiddlewares = [];\n  const onErrorMiddlewares = [];\n\n  const instance = (event = {}, context = {}) => {\n    var _plugin$requestStart;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$requestStart = plugin.requestStart) === null || _plugin$requestStart === void 0 ? void 0 : _plugin$requestStart.call(plugin);\n    const request = {\n      event,\n      context,\n      response: undefined,\n      error: undefined,\n      internal: {}\n    };\n    return runRequest(request, [...beforeMiddlewares], baseHandler, [...afterMiddlewares], [...onErrorMiddlewares], plugin);\n  };\n\n  instance.use = middlewares => {\n    if (Array.isArray(middlewares)) {\n      for (const middleware of middlewares) {\n        instance.applyMiddleware(middleware);\n      }\n\n      return instance;\n    }\n\n    return instance.applyMiddleware(middlewares);\n  };\n\n  instance.applyMiddleware = middleware => {\n    const {\n      before,\n      after,\n      onError\n    } = middleware;\n\n    if (!before && !after && !onError) {\n      throw new Error('Middleware must be an object containing at least one key among \"before\", \"after\", \"onError\"');\n    }\n\n    if (before) instance.before(before);\n    if (after) instance.after(after);\n    if (onError) instance.onError(onError);\n    return instance;\n  }; // Inline Middlewares\n\n\n  instance.before = beforeMiddleware => {\n    beforeMiddlewares.push(beforeMiddleware);\n    return instance;\n  };\n\n  instance.after = afterMiddleware => {\n    afterMiddlewares.unshift(afterMiddleware);\n    return instance;\n  };\n\n  instance.onError = onErrorMiddleware => {\n    onErrorMiddlewares.push(onErrorMiddleware);\n    return instance;\n  };\n\n  instance.__middlewares = {\n    before: beforeMiddlewares,\n    after: afterMiddlewares,\n    onError: onErrorMiddlewares\n  };\n  return instance;\n};\n\nconst runRequest = async (request, beforeMiddlewares, baseHandler, afterMiddlewares, onErrorMiddlewares, plugin) => {\n  try {\n    await runMiddlewares(request, beforeMiddlewares, plugin); // Check if before stack hasn't exit early\n\n    if (request.response === undefined) {\n      var _plugin$beforeHandler, _plugin$afterHandler;\n\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeHandler = plugin.beforeHandler) === null || _plugin$beforeHandler === void 0 ? void 0 : _plugin$beforeHandler.call(plugin);\n      request.response = await baseHandler(request.event, request.context);\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$afterHandler = plugin.afterHandler) === null || _plugin$afterHandler === void 0 ? void 0 : _plugin$afterHandler.call(plugin);\n      await runMiddlewares(request, afterMiddlewares, plugin);\n    }\n  } catch (e) {\n    // Reset response changes made by after stack before error thrown\n    request.response = undefined;\n    request.error = e;\n\n    try {\n      await runMiddlewares(request, onErrorMiddlewares, plugin);\n    } catch (e) {\n      // Save error that wasn't handled\n      e.originalError = request.error;\n      request.error = e;\n      throw request.error;\n    } // Catch if onError stack hasn't handled the error\n\n\n    if (request.response === undefined) throw request.error;\n  } finally {\n    var _plugin$requestEnd;\n\n    await (plugin === null || plugin === void 0 ? void 0 : (_plugin$requestEnd = plugin.requestEnd) === null || _plugin$requestEnd === void 0 ? void 0 : _plugin$requestEnd.call(plugin, request));\n  }\n\n  return request.response;\n};\n\nconst runMiddlewares = async (request, middlewares, plugin) => {\n  for (const nextMiddleware of middlewares) {\n    var _plugin$beforeMiddlew, _plugin$afterMiddlewa;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeMiddlew = plugin.beforeMiddleware) === null || _plugin$beforeMiddlew === void 0 ? void 0 : _plugin$beforeMiddlew.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name);\n    const res = await (nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware(request));\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$afterMiddlewa = plugin.afterMiddleware) === null || _plugin$afterMiddlewa === void 0 ? void 0 : _plugin$afterMiddlewa.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name); // short circuit chaining and respond early\n\n    if (res !== undefined) {\n      request.response = res;\n      return;\n    }\n  }\n};\n\nmodule.exports = middy;\n", "\"use strict\";\n\nconst {\n  Agent\n} = require('https'); // const { NodeHttpHandler } = require('@aws-sdk/node-http-handler') // aws-sdk v3\n\n\nconst awsClientDefaultOptions = {\n  // AWS SDK v3\n  // Docs: https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/enforcing-tls.html\n\n  /* requestHandler: new NodeHttpHandler({\n    httpsAgent: new Agent(\n      {\n        secureProtocol: 'TLSv1_2_method'\n      }\n    )\n  }) */\n  // Docs: https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/enforcing-tls.html\n  httpOptions: {\n    agent: new Agent({\n      secureProtocol: 'TLSv1_2_method'\n    })\n  }\n};\n\nconst createPrefetchClient = options => {\n  const awsClientOptions = { ...awsClientDefaultOptions,\n    ...options.awsClientOptions\n  };\n  const client = new options.AwsClient(awsClientOptions); // AWS XRay\n\n  if (options.awsClientCapture) {\n    return options.awsClientCapture(client);\n  }\n\n  return client;\n};\n\nconst createClient = async (options, request) => {\n  let awsClientCredentials = {}; // Role Credentials\n\n  if (options.awsClientAssumeRole) {\n    if (!request) throw new Error('Request required when assuming role');\n    awsClientCredentials = await getInternal({\n      credentials: options.awsClientAssumeRole\n    }, request);\n  }\n\n  awsClientCredentials = { ...awsClientCredentials,\n    ...options.awsClientOptions\n  };\n  return createPrefetchClient({ ...options,\n    awsClientOptions: awsClientCredentials\n  });\n};\n\nconst canPrefetch = options => {\n  return !(options !== null && options !== void 0 && options.awsClientAssumeRole) && !(options !== null && options !== void 0 && options.disablePrefetch);\n}; // Internal Context\n\n\nconst getInternal = async (variables, request) => {\n  if (!variables || !request) return {};\n  let keys = [];\n  let values = [];\n\n  if (variables === true) {\n    keys = values = Object.keys(request.internal);\n  } else if (typeof variables === 'string') {\n    keys = values = [variables];\n  } else if (Array.isArray(variables)) {\n    keys = values = variables;\n  } else if (typeof variables === 'object') {\n    keys = Object.keys(variables);\n    values = Object.values(variables);\n  }\n\n  const promises = [];\n\n  for (const internalKey of values) {\n    var _valuePromise;\n\n    // 'internal.key.sub_value' -> { [key]: internal.key.sub_value }\n    const pathOptionKey = internalKey.split('.');\n    const rootOptionKey = pathOptionKey.shift();\n    let valuePromise = request.internal[rootOptionKey];\n\n    if (typeof ((_valuePromise = valuePromise) === null || _valuePromise === void 0 ? void 0 : _valuePromise.then) !== 'function') {\n      valuePromise = Promise.resolve(valuePromise);\n    }\n\n    promises.push(valuePromise.then(value => pathOptionKey.reduce((p, c) => p === null || p === void 0 ? void 0 : p[c], value)));\n  } // ensure promise has resolved by the time it's needed\n  // If one of the promises throws it will bubble up to @middy/core\n\n\n  values = await Promise.allSettled(promises);\n  const errors = values.filter(res => res.status === 'rejected').map(res => res.reason.message);\n  if (errors.length) throw new Error(JSON.stringify(errors));\n  return keys.reduce((obj, key, index) => ({ ...obj,\n    [sanitizeKey(key)]: values[index].value\n  }), {});\n};\n\nconst sanitizeKeyPrefixLeadingNumber = /^([0-9])/;\nconst sanitizeKeyRemoveDisallowedChar = /[^a-zA-Z0-9]+/g;\n\nconst sanitizeKey = key => {\n  return key.replace(sanitizeKeyPrefixLeadingNumber, '_$1').replace(sanitizeKeyRemoveDisallowedChar, '_');\n}; // fetch Cache\n\n\nconst cache = {}; // key: { value:{fetchKey:Promise}, expiry }\n\nconst processCache = (options, fetch = () => undefined, request) => {\n  const {\n    cacheExpiry,\n    cacheKey\n  } = options;\n\n  if (cacheExpiry) {\n    const cached = getCache(cacheKey);\n    const unexpired = cached && (cacheExpiry < 0 || cached.expiry > Date.now());\n\n    if (unexpired && cached.modified) {\n      const value = fetch(request, cached.value);\n      cache[cacheKey] = {\n        value: { ...cached.value,\n          ...value\n        },\n        expiry: cached.expiry\n      };\n      return cache[cacheKey];\n    }\n\n    if (unexpired) {\n      return { ...cached,\n        cache: true\n      };\n    }\n  }\n\n  const value = fetch(request);\n  const expiry = Date.now() + cacheExpiry;\n\n  if (cacheExpiry) {\n    cache[cacheKey] = {\n      value,\n      expiry\n    };\n  }\n\n  return {\n    value,\n    expiry\n  };\n};\n\nconst getCache = key => {\n  return cache[key];\n}; // Used to remove parts of a cache\n\n\nconst modifyCache = (cacheKey, value) => {\n  if (!cache[cacheKey]) return;\n  cache[cacheKey] = { ...cache[cacheKey],\n    value,\n    modified: true\n  };\n};\n\nconst clearCache = (keys = null) => {\n  var _keys;\n\n  keys = (_keys = keys) !== null && _keys !== void 0 ? _keys : Object.keys(cache);\n  if (!Array.isArray(keys)) keys = [keys];\n\n  for (const cacheKey of keys) {\n    cache[cacheKey] = undefined;\n  }\n};\n\nconst jsonSafeParse = (string, reviver) => {\n  if (typeof string !== 'string') return string;\n  const firstChar = string[0];\n  if (firstChar !== '{' && firstChar !== '[' && firstChar !== '\"') return string;\n\n  try {\n    return JSON.parse(string, reviver);\n  } catch (e) {}\n\n  return string;\n};\n\nconst normalizeHttpResponse = response => {\n  var _response$headers, _response;\n\n  // May require updating to catch other types\n  if (response === undefined) {\n    response = {};\n  } else if (Array.isArray(response) || typeof response !== 'object' || response === null) {\n    response = {\n      body: response\n    };\n  }\n\n  response.headers = (_response$headers = (_response = response) === null || _response === void 0 ? void 0 : _response.headers) !== null && _response$headers !== void 0 ? _response$headers : {};\n  return response;\n}; // smaller version of `http-errors`\n\n\nconst statuses = require('./codes.json');\n\nconst {\n  inherits\n} = require('util');\n\nconst createErrorRegexp = /[^a-zA-Z]/g;\n\nconst createError = (code, message, properties = {}) => {\n  const name = statuses[code].replace(createErrorRegexp, '');\n  const className = name.substr(-5) !== 'Error' ? name + 'Error' : name;\n\n  function HttpError(message) {\n    // create the error object\n    const msg = message !== null && message !== void 0 ? message : statuses[code];\n    const err = new Error(msg); // capture a stack trace to the construction point\n\n    Error.captureStackTrace(err, HttpError); // adjust the [[Prototype]]\n\n    Object.setPrototypeOf(err, HttpError.prototype); // redefine the error message\n\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    }); // redefine the error name\n\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n\n  inherits(HttpError, Error);\n  const desc = Object.getOwnPropertyDescriptor(HttpError, 'name');\n  desc.value = className;\n  Object.defineProperty(HttpError, 'name', desc);\n  Object.assign(HttpError.prototype, {\n    status: code,\n    statusCode: code,\n    expose: code < 500\n  }, properties);\n  return new HttpError(message);\n};\n\nmodule.exports = {\n  createPrefetchClient,\n  createClient,\n  canPrefetch,\n  getInternal,\n  sanitizeKey,\n  processCache,\n  getCache,\n  modifyCache,\n  clearCache,\n  jsonSafeParse,\n  normalizeHttpResponse,\n  createError\n};\n", "\"use strict\";\n\nconst mimePattern = /^application\\/(.+\\+)?json(;.*)?$/;\nconst defaults = {\n  reviver: undefined\n};\n\nconst httpJsonBodyParserMiddleware = (opts = {}) => {\n  const options = { ...defaults,\n    ...opts\n  };\n\n  const httpJsonBodyParserMiddlewareBefore = async request => {\n    var _headers$ContentType;\n\n    const {\n      headers,\n      body\n    } = request.event;\n    const contentTypeHeader = (_headers$ContentType = headers === null || headers === void 0 ? void 0 : headers['Content-Type']) !== null && _headers$ContentType !== void 0 ? _headers$ContentType : headers === null || headers === void 0 ? void 0 : headers['content-type'];\n\n    if (mimePattern.test(contentTypeHeader)) {\n      try {\n        const data = request.event.isBase64Encoded ? Buffer.from(body, 'base64').toString() : body;\n        request.event.rawBody = body;\n        request.event.body = JSON.parse(data, options.reviver);\n      } catch (err) {\n        const {\n          createError\n        } = require('@middy/util'); // UnprocessableEntity\n\n\n        throw createError(422, 'Content type defined as JSON but an invalid JSON was provided');\n      }\n    }\n  };\n\n  return {\n    before: httpJsonBodyParserMiddlewareBefore\n  };\n};\n\nmodule.exports = httpJsonBodyParserMiddleware;\n", "import { APIGatewayProxyEvent, APIGatewayProxyResult } from \"aws-lambda\";\r\nimport { middyfy } from \"@libs/lambda\";\r\nimport { header, statusCodes } from \"@functions/resources/APIresponse\";\r\nimport ServicesLayer from \"../../services\";\r\n\r\nexport const getAllResultSet = middyfy(\r\n\tasync (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n\t\ttry {\r\n\t\t\tconst params = JSON.parse(event.body);\r\n\r\n\t\t\tconst resultSet = await ServicesLayer.resultSetServices.getResultSets(params.apiKey);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: statusCodes.Successful,\r\n\t\t\t\theaders: header,\r\n\t\t\t\tbody: JSON.stringify(resultSet)\r\n\t\t\t};\r\n\t\t} catch (e) {\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: statusCodes.internalError,\r\n\t\t\t\theaders: header,\r\n\t\t\t\tbody: JSON.stringify(e)\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n);\r\n\r\nexport const getResultSet = middyfy(\r\n\tasync (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n\t\ttry {\r\n\t\t\tconst params = JSON.parse(event.body);\r\n\r\n\t\t\tconst resultSet = await ServicesLayer.resultSetServices.getResultSet(\r\n\t\t\t\tparams.resultSetID,\r\n\t\t\t\tparams.apiKey\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: statusCodes.Successful,\r\n\t\t\t\theaders: header,\r\n\t\t\t\tbody: JSON.stringify(resultSet)\r\n\t\t\t};\r\n\t\t} catch (e) {\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: statusCodes.internalError,\r\n\t\t\t\theaders: header,\r\n\t\t\t\tbody: JSON.stringify(e)\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// Deleting a result set\r\nexport const deleteResultSet = middyfy(\r\n\tasync (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\r\n\t\ttry {\r\n\t\t\tconst params = JSON.parse(event.body);\r\n\t\t\tconst result = await ServicesLayer.resultSetServices.deleteResultSet(\r\n\t\t\t\tparams.resultSetID,\r\n\t\t\t\tparams.apiKey\r\n\t\t\t);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: statusCodes.Successful,\r\n\t\t\t\theaders: header,\r\n\t\t\t\tbody: JSON.stringify(result)\r\n\t\t\t};\r\n\t\t} catch (e) {\r\n\t\t\treturn {\r\n\t\t\t\tstatusCode: statusCodes.internalError,\r\n\t\t\t\theaders: header,\r\n\t\t\t\tbody: JSON.stringify(e)\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n);\r\n", "import middy from \"@middy/core\";\r\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\";\r\n\r\nexport const middyfy = (handler) => middy(handler).use(middyJsonBodyParser());\r\n", "export const URL = process.env.NODE_ENV === \"development\" ? \"http://localhost:3000\" : \"https://dcfwz5n420bzu.cloudfront.net\";\r\n\r\nexport const header = {\r\n\t\"Content-Type\": \"application/json\",\r\n\t\"Access-Control-Allow-Methods\": \"*\",\r\n\t\"Access-Control-Allow-Origin\": URL,\r\n\t\"Access-Control-Allow-Headers\": \"*\",\r\n\t\"Access-Control-Allow-Credentials\": true\r\n};\r\n\r\nexport const statusCodes = {\r\n\t// Sucess:\r\n\tSuccessful: 200,\r\n\tcreated: 201,\r\n\taccepted: 202,\r\n\tno_content: 204,\r\n\r\n\t// client errors:\r\n\tbadRequest: 400,\r\n\tunauthorized: 401,\r\n\tforbidden: 403,\r\n\tnotfound: 404,\r\n\ttimeOut: 408,\r\n\tgone: 410,\r\n\tnotAcceptiable: 406,\r\n\r\n\t// Server errors:\r\n\tinternalError: 500,\r\n\tnotImplemented: 501,\r\n\tbadGateway: 502\r\n};\r\n\r\nexport const AWSDetails = {\r\n\tregion: \"\",\r\n\taccount_id: \"\"\r\n};\r\n", "import * as AWS from \"aws-sdk\";\r\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\n\r\nconst dynamoDBClient = (): DocumentClient => {\r\n\tif (process.env.IS_OFFLINE) {\r\n\t\treturn new AWS.DynamoDB.DocumentClient({\r\n\t\t\tregion: \"local\",\r\n\t\t\tendpoint: \"http://localhost:8000\",\r\n\t\t\taccessKeyId: \"DEFAULT_ACCESS_KEY\",\r\n\t\t\tsecretAccessKey: \"DEFAULT_SECRET_KEY\"\r\n\t\t});\r\n\t}\r\n\treturn new AWS.DynamoDB.DocumentClient();\r\n};\r\n\r\nexport default dynamoDBClient;\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport Creator from \"@model/creator/creator.model\";\r\n\r\nexport default class CreatorService {\r\n\tprivate TableName = \"CreatorTable\";\r\n\r\n\tconstructor(private docClient: DocumentClient) {}\r\n\r\n\tasync getAllCreators(): Promise<Creator[]> {\r\n\t\tconst creator = await this.docClient\r\n\t\t\t.scan({\r\n\t\t\t\tTableName: this.TableName\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t\treturn creator.Items as Creator[];\r\n\t}\r\n\r\n\tasync addCreator(creator: Creator): Promise<Creator> {\r\n\t\tif (!creator) {\r\n\t\t\tthrow new Error(\"no new creator provided\");\r\n\t\t}\r\n\t\tawait this.docClient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: creator,\r\n\t\t\t\tConditionExpression: \"email <> :email\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":email\": creator.email\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t\treturn creator as Creator;\r\n\t}\r\n\r\n\tasync getCreator(email: string): Promise<Creator> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\temail\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Item as Creator;\r\n\t}\r\n\r\n\tasync getCreatorByKey(key: string): Promise<Creator> {\r\n\t\tconst creator = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"gsiIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :key\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":key\": key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn creator.Items[0] as Creator;\r\n\t}\r\n\r\n\tasync updateCreator(email: string, token: string): Promise<boolean> {\r\n\t\treturn this.docClient\r\n\t\t\t.update({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\temail\r\n\t\t\t\t},\r\n\t\t\t\tUpdateExpression: \"set #RefreshAccessToken = :RefreshAccessToken\",\r\n\t\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\t\"#RefreshAccessToken\": \"RefreshAccessToken\"\r\n\t\t\t\t},\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":RefreshAccessToken\": token\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise()\r\n\t\t\t.then(() => true)\r\n\t\t\t.catch((err) => err);\r\n\t}\r\n\r\n\tasync deleteCreator(email: string) {\r\n\t\tawait this.docClient.delete({\r\n\t\t\tTableName: this.TableName,\r\n\t\t\tKey: {\r\n\t\t\t\temail: email\r\n\t\t\t}\r\n\t\t}).promise();\r\n\t}\r\n}\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport Report from \"@model/report/report.model\";\r\nimport Permission from \"@model/permission/permissions.model\";\r\n\r\nimport ServicesLayer from \".\";\r\n\r\nexport default class ReportService {\r\n\t// add function to get all published reports\r\n\r\n\tprivate TableName = \"ReportTable\";\r\n\r\n\tconstructor(private docClient: DocumentClient) {}\r\n\r\n\t// get specific reports\r\n\tasync getReport(id: string): Promise<any> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { reportID: id }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\tif (result === undefined) throw new Error(`report with id: ${id} does not exist`);\r\n\r\n\t\tconst item = result.Item;\r\n\r\n\t\tconst report = [];\r\n\r\n\t\tconst reportBlocks = await ServicesLayer.reportBlockService.getReportBlocks(item.reportID);\r\n\r\n\t\tconst promises = reportBlocks.map(async (block) => {\r\n\t\t\tconst type = block.blockType;\r\n\t\t\tconst ob = {} as any;\r\n\r\n\t\t\tob.blockType = type;\r\n\t\t\tob.position = block.position;\r\n\t\t\tob.reportBlockID = block.reportBlockID;\r\n\r\n\t\t\tif (type === \"TWEET\") {\r\n\t\t\t\tob.block = {\r\n\t\t\t\t\ttweetID: block.tweetID\r\n\t\t\t\t};\r\n\t\t\t} else if (type === \"RICHTEXT\") {\r\n\t\t\t\tconst style = await ServicesLayer.textStyleService.getStyle(block.reportBlockID);\r\n\t\t\t\tob.block = {\r\n\t\t\t\t\ttext: block.richText,\r\n\t\t\t\t\tposition: block.position,\r\n\t\t\t\t\tstyle\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treport.push(ob);\r\n\t\t});\r\n\r\n\t\tawait Promise.all(promises);\r\n\t\tawait ServicesLayer.reportBlockService.sortReportBlocks(report);\r\n\t\tconst rp = [];\r\n\t\tlet bl = false;\r\n\t\tlet count = 0;\r\n\t\tlet max;\r\n\r\n\t\tfor (let y = 0; y < report.length; y++) {\r\n\t\t\tmax = report[y].position;\r\n\t\t}\r\n\r\n\t\tlet y = 0;\r\n\t\tfor (let x = 0; x < max + 2; x++) {\r\n\t\t\tif (report[y] !== undefined) {\r\n\t\t\t\tif (report[y].position === x) {\r\n\t\t\t\t\trp.push(report[y]);\r\n\t\t\t\t\tbl = true;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\ty++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!bl) {\r\n\t\t\t\trp.push({ blockType: \"RICHTEXT\", position: x, block: null });\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tbl = false;\r\n\t\t}\r\n\r\n\t\titem.Report = rp;\r\n\t\titem.numOfBlocks = count;\r\n\r\n\t\treturn result.Item;\r\n\t}\r\n\r\n\t// get my report helper for backend\r\n\tasync getReportHelper(id: string): Promise<Report> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { reportID: id }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\t// const tweets = await ServicesLayer.tweetService.getTweets(resultSetID);\r\n\t\treturn result.Item as Report;\r\n\t}\r\n\r\n\t// get my reports\r\n\tasync getReports(key: string): Promise<Report[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"reportIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :apiKey\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":apiKey\": key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\tif (result === undefined) throw new Error(`no reports found`);\r\n\r\n\t\t// const tweets = await ServicesLayer.tweetService.getTweets(resultSetID);\r\n\t\treturn result.Items as Report[];\r\n\t}\r\n\r\n\tasync getDraftReports(key: string): Promise<Report[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"reportIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :apiKey\",\r\n\t\t\t\tFilterExpression: \"#status = :status\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":apiKey\": key,\r\n\t\t\t\t\t\":status\": \"DRAFT\"\r\n\t\t\t\t},\r\n\t\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\t\"#status\": \"status\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as Report[];\r\n\t}\r\n\r\n\tasync getPublishedReports(key: string): Promise<Report[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"reportIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :apiKey\",\r\n\t\t\t\tFilterExpression: \"#status = :status\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":apiKey\": key,\r\n\t\t\t\t\t\":status\": \"PUBLISHED\"\r\n\t\t\t\t},\r\n\t\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\t\"#status\": \"status\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as Report[];\r\n\t}\r\n\r\n\tasync getAllPublishedReports(): Promise<Report[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"statusIndex\",\r\n\t\t\t\tKeyConditionExpression: \"#status = :status\",\r\n\t\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\t\"#status\": \"status\"\r\n\t\t\t\t},\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":status\": \"PUBLISHED\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as Report[];\r\n\t}\r\n\r\n\tasync getSharedReports(key: string): Promise<Report[]> {\r\n\t\tconst permissions: Permission[] = await ServicesLayer.permissionService.getPermissions(key);\r\n\r\n\t\tconst results: Report[] = [];\r\n\r\n\t\tconst promises = permissions.map(async (permission) => {\r\n\t\t\tconst id = permission.reportID;\r\n\r\n\t\t\tconst report = await this.getReportHelper(id);\r\n\r\n\t\t\tresults.push(report);\r\n\t\t});\r\n\r\n\t\tawait Promise.all(promises);\r\n\r\n\t\treturn results as Report[];\r\n\t}\r\n\r\n\t// store reports\r\n\tasync addReport(report: Report): Promise<Report> {\r\n\t\t// console.log(report);\r\n\t\tawait this.docClient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: report\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn report as Report;\r\n\t}\r\n\r\n\t// update Report\r\n\tasync updateReportStatus(status: string, reportID: string) {\r\n\t\tawait this.docClient\r\n\t\t\t.update({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\treportID: reportID\r\n\t\t\t\t},\r\n\t\t\t\tUpdateExpression: \"SET #status = :status\",\r\n\t\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\t\"#status\": \"status\"\r\n\t\t\t\t},\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":status\": status\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n\r\n\tasync updateReportTitle(title: string, reportID: string) {\r\n\t\tawait this.docClient.update({\r\n\t\t\tTableName: this.TableName,\r\n\t\t\tKey: {\r\n\t\t\t\treportID\r\n\t\t\t},\r\n\t\t\tUpdateExpression: \"SET #title = :title\",\r\n\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\"#title\": \"title\"\r\n\t\t\t},\r\n\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\":title\": title\r\n\t\t\t}\r\n\t\t}).promise();\r\n\t}\r\n\r\n\tasync deleteReport(id: string) {\r\n\t\tawait this.docClient\r\n\t\t\t.delete({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\treportID: id\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n\r\n\t// verify owner of report\r\n\tasync verifyOwner(reportID: string, apiKey: string): Promise<boolean> {\r\n\t\tconst per = await this.getReport(reportID);\r\n\r\n\t\treturn per.apiKey === apiKey;\r\n\t}\r\n}\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport ReportBlock from \"@model/reportBlock/reportBlock.model\";\r\n\r\nexport default class ReportBlockService {\r\n\tprivate TableName = \"ReportBlockTable\";\r\n\r\n\tconstructor(private docClient: DocumentClient) {}\r\n\r\n\tasync getReportBlock(reportBlockID: string): Promise<ReportBlock> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { id: reportBlockID }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Item as ReportBlock;\r\n\t}\r\n\r\n\tasync getReportBlocks(key: string): Promise<ReportBlock[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"reportBlockIndex\",\r\n\t\t\t\tKeyConditionExpression: \"reportID = :reportID\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":reportID\": key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\t// console.log(result.Items);\r\n\t\tif (result === undefined) return [] as ReportBlock[];\r\n\r\n\t\t// let blocks: ReportBlock[];\r\n\t\tconst blocks = result.Items as ReportBlock[];\r\n\t\tthis.sortReportBlocks(blocks);\r\n\r\n\t\t// console.log(blocks);\r\n\t\treturn blocks as ReportBlock[];\r\n\t}\r\n\r\n\tasync addReportBlock(reportBlock: ReportBlock): Promise<ReportBlock> {\r\n\t\tawait this.docClient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: reportBlock\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn reportBlock as ReportBlock;\r\n\t}\r\n\r\n\tasync deleteReportBlock(id: string) {\r\n\t\tawait this.docClient\r\n\t\t\t.delete({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { reportBlockID: id }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n\r\n\tasync updatePosition(id: string, position: number) {\r\n\t\tawait this.docClient\r\n\t\t\t.update({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\treportBlockID: id\r\n\t\t\t\t},\r\n\t\t\t\tUpdateExpression: \"SET #position = :position\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":position\": position\r\n\t\t\t\t},\r\n\t\t\t\tExpressionAttributeNames: {\r\n\t\t\t\t\t\"#position\": \"position\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n\r\n\tasync sortReportBlocks(reportBlocks: ReportBlock[]): Promise<ReportBlock[]> {\r\n\t\tthis;\r\n\t\treportBlocks.sort((a, b) => {\r\n\t\t\tif (a.position > b.position) return 1;\r\n\t\t\tif (a.position < b.position) return -1;\r\n\t\t\treturn 0;\r\n\t\t});\r\n\t\treturn reportBlocks;\r\n\t}\r\n}\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport ResultSet from \"@model/resultSet/resultSet.model\";\r\n\r\nexport default class ResultSetService {\r\n\tprivate TableName = \"ResultSetTable\";\r\n\r\n\tconstructor(private docClient: DocumentClient) { }\r\n\r\n\tasync getResultSets(key: string): Promise<ResultSet[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"resultSetIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :apiKey\",\r\n\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":apiKey\": key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as ResultSet[];\r\n\t}\r\n\r\n\tasync getResultSet(id: string, key: string): Promise<ResultSet> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tapiKey: key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\tif (result === undefined) throw new Error(`result set with id: ${id} does not exist.`);\r\n\r\n\t\treturn result.Item as ResultSet;\r\n\t}\r\n\r\n\tasync addResultSet(resultSet: ResultSet): Promise<ResultSet> {\r\n\t\tawait this.docClient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: resultSet\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn resultSet as ResultSet;\r\n\t}\r\n\r\n\tasync deleteResultSet(id: string, key: string) {\r\n\t\tawait this.docClient\r\n\t\t\t.delete({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tapiKey: key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n}\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport TextStyle from \"@model/textStyles/textStyles.model\";\r\n\r\nexport default class TextStyleService {\r\n\tprivate TableName = \"TextStylesTable\";\r\n\r\n\tconstructor(private docClient: DocumentClient) {}\r\n\r\n\tasync getStyle(RBID: string): Promise<TextStyle[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"textStylesIndex\",\r\n\t\t\t\tKeyConditionExpression: \"reportBlockID = :reportBlockID\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":reportBlockID\": RBID\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as TextStyle[];\r\n\t}\r\n\r\n\tasync addStyle(style: TextStyle): Promise<TextStyle> {\r\n\t\tawait this.docClient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: style\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn style as TextStyle;\r\n\t}\r\n\r\n\tasync deleteStyle(id: string) {\r\n\t\tawait this.docClient\r\n\t\t\t.delete({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\ttextStylesID: id\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n}\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport Permission from \"@model/permission/permissions.model\";\r\n\r\nexport default class PermissionService {\r\n\tprivate TableName = \"PermissionTable\";\r\n\r\n\tconstructor(private docClient: DocumentClient) {}\r\n\r\n\tasync getPermission(id: string, key: string): Promise<Permission> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { reportID: id, apiKey: key }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Item as Permission;\r\n\t}\r\n\r\n\tasync addPermission(permission: Permission): Promise<Permission> {\r\n\t\tawait this.docClient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: permission\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn permission as Permission;\r\n\t}\r\n\r\n\t// verify report retrieval\r\n\tasync verifyReportRetr(status: string, apiKey: string, reportID: string): Promise<boolean> {\r\n\t\tconst per = await this.getPermission(reportID, apiKey);\r\n\r\n\t\tif (status !== \"PUBLISHED\" && per === undefined) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// verify editoral rights of report\r\n\tasync verifyEditor(reportID: string, apiKey: string): Promise<boolean> {\r\n\t\tconst per = await this.getPermission(reportID, apiKey);\r\n\r\n\t\treturn per !== undefined && per.type === \"EDITOR\";\r\n\t}\r\n\r\n\tasync getPermissions(key: string): Promise<Permission[]> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"permissionsIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :apiKey\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":apiKey\": key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as Permission[];\r\n\t}\r\n\r\n\tasync updatePermission(id: string, key: string, perm: string): Promise<Permission> {\r\n\t\tconst result = await this.docClient\r\n\t\t\t.update({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\treportID: id,\r\n\t\t\t\t\tapiKey: key\r\n\t\t\t\t},\r\n\t\t\t\tUpdateExpression: \"SET type = :type\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":type\": perm\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Attributes as Permission;\r\n\t}\r\n\r\n\tasync deletePermission(id: string, key: string) {\r\n\t\tawait this.docClient\r\n\t\t\t.delete({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: {\r\n\t\t\t\t\treportID: id,\r\n\t\t\t\t\tapiKey: key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n}\r\n", "import Tweet from \"@model/tweet/tweet.model\";\r\n\r\nexport default class TweetService {\r\n\tasync addTweets(data: any, includes: any, numTweets: number): Promise<Tweet[]> {\r\n\t\tthis;\r\n\t\tconst tweetList: Tweet[] = [];\r\n\t\tfor (let i = 0; i < numTweets; i++) {\r\n\t\t\tif (i in includes.users) {\r\n\t\t\t\ttweetList.push({\r\n\t\t\t\t\t// username: includes.users[i].username,\r\n\t\t\t\t\t// fullname: includes.users[i].name,\r\n\t\t\t\t\t// dateOT: data[i].created_at,\r\n\t\t\t\t\tnumComments: data[i].public_metrics.reply_count,\r\n\t\t\t\t\tnumLikes: data[i].public_metrics.like_count,\r\n\t\t\t\t\tnumRetweets: data[i].public_metrics.retweet_count,\r\n\t\t\t\t\t// text: data[i].text,\r\n\t\t\t\t\ttweetId: data[i].id\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tweetList as Tweet[];\r\n\t}\r\n\r\n\tasync sortTweets(tweets: Tweet[], sortBy: string): Promise<Tweet[]> {\r\n\t\tthis;\r\n\t\tif (sortBy === \"byLikes\") {\r\n\t\t\ttweets.sort((a, b) => {\r\n\t\t\t\tif (a.numLikes < b.numLikes) return 1;\r\n\t\t\t\tif (a.numLikes > b.numLikes) return -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\t\t} else if (sortBy === \"byComments\") {\r\n\t\t\ttweets.sort((a, b) => {\r\n\t\t\t\tif (a.numComments < b.numComments) return 1;\r\n\t\t\t\tif (a.numComments > b.numComments) return -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\t\t} else if (sortBy === \"byRetweets\") {\r\n\t\t\ttweets.sort((a, b) => {\r\n\t\t\t\tif (a.numRetweets < b.numRetweets) return 1;\r\n\t\t\t\tif (a.numRetweets > b.numRetweets) return -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn tweets;\r\n\t}\r\n\r\n\tasync createArray(tweets: Tweet[]): Promise<string[]> {\r\n\t\tthis;\r\n\t\tconst result = [];\r\n\t\ttweets.map(async (tweet) => {\r\n\t\t\tresult.push(tweet.tweetId);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n}\r\n", "import { DocumentClient } from \"aws-sdk/clients/dynamodb\";\r\nimport Schedule from \"@model/schedule/schedule.model\";\r\n\r\nexport default class ScheduleService {\r\n\tprivate TableName = \"ScheduleTable\";\r\n\r\n\tconstructor(private docCLient: DocumentClient) {}\r\n\r\n\tasync getSchedule(id: string): Promise<Schedule> {\r\n\t\tconst result = await this.docCLient\r\n\t\t\t.get({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { id }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Item as Schedule;\r\n\t}\r\n\r\n\tasync getShedules(key: string): Promise<Schedule[]> {\r\n\t\tconst result = await this.docCLient\r\n\t\t\t.query({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tIndexName: \"scheduleIndex\",\r\n\t\t\t\tKeyConditionExpression: \"apiKey = :apiKey\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":apiKey\": key\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn result.Items as Schedule[];\r\n\t}\r\n\r\n\tasync addScheduleSetting(scheduleSetting: Schedule): Promise<Schedule> {\r\n\t\tawait this.docCLient\r\n\t\t\t.put({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tItem: scheduleSetting\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\r\n\t\treturn scheduleSetting as Schedule;\r\n\t}\r\n\r\n\tasync updateScheduleSetting(id: string, date: Date) {\r\n\t\tawait this.docCLient\r\n\t\t\t.update({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { id },\r\n\t\t\t\tUpdateExpression: \"set lastGenerated = :lastGenerated\",\r\n\t\t\t\tExpressionAttributeValues: {\r\n\t\t\t\t\t\":lastGenerated\": date\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n\r\n\tasync deleteScheduleSetting(id: string) {\r\n\t\tawait this.docCLient\r\n\t\t\t.delete({\r\n\t\t\t\tTableName: this.TableName,\r\n\t\t\t\tKey: { id }\r\n\t\t\t})\r\n\t\t\t.promise();\r\n\t}\r\n}\r\n", "import dynamoDBClient from \"../model/database\";\r\nimport CreatorService from \"./creator.service\";\r\nimport ReportService from \"./report.service\";\r\nimport ReportBlockService from \"./reportBlock.service\";\r\nimport ResultSetService from \"./resultSet.service\";\r\nimport TextStyleService from \"./textStyles.service\";\r\nimport PermissionService from \"./permission.service\";\r\nimport TweetService from \"./tweet.service\";\r\nimport ScheduleService from \"./schedule.service\";\r\n\r\nconst reportService = new ReportService(dynamoDBClient());\r\nconst creatorService = new CreatorService(dynamoDBClient());\r\nconst resultSetServices = new ResultSetService(dynamoDBClient());\r\nconst reportBlockService = new ReportBlockService(dynamoDBClient());\r\nconst textStyleService = new TextStyleService(dynamoDBClient());\r\nconst tweetService = new TweetService();\r\nconst permissionService = new PermissionService(dynamoDBClient());\r\nconst scheduleService = new ScheduleService(dynamoDBClient());\r\n\r\nexport default {\r\n\tcreatorService,\r\n\ttweetService,\r\n\tresultSetServices,\r\n\treportService,\r\n\treportBlockService,\r\n\ttextStyleService,\r\n\tpermissionService,\r\n\tscheduleService\r\n};\r\n"],
  "mappings": "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",
  "names": ["module", "middy", "e", "module", "value", "message", "module", "middy", "middyJsonBodyParser", "y"]
}
